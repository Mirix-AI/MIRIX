import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

const resources = {
  en: {
    translation: {
      tabs: {
        chat: 'Chat',
        screenshots: 'Screenshots',
        memory: 'Existing Memory',
        settings: 'Settings'
      },
      settings: {
        title: 'Settings',
        subtitle: 'Configure your MIRIX assistant',
        sections: {
          model: 'Model Configuration',
          preferences: 'Preferences',
          apiKeys: 'API Keys',
          about: 'About'
        },
        chatModel: 'Chat Agent Model',
        memoryModel: 'Memory Manager Model',
        persona: 'Persona',
        personaEdit: 'Edit',
        applyTemplate: 'Apply Template',
        editPersonaText: 'Edit Persona Text',
        buttons: {
          save: 'Save',
          cancel: 'Cancel'
        },
        language: 'Language',
        languageDescription: 'Select the display language',
        timezone: 'Timezone',
        apiKeyManagement: 'API Key Management',
        updateApiKeys: 'Update API Keys',
        about: {
          name: 'MIRIX Desktop',
          version: 'Version',
          docs: 'Documentation',
          reportIssue: 'Report Issue',
          description: 'AI Assistant powered by advanced language models'
        },
        add: 'Add',
        descriptions: {
          chatModel: 'Choose the AI model for chat responses',
          changingChatModel: 'Changing chat agent model...',
          memoryModel: 'Choose the AI model for memory management operations',
          changingMemoryModel: 'Changing memory manager model...',
          personaDisplay: "This shows the agent's current active persona. Click Edit to modify it.",
          personaEdit: 'Apply a template or customize the persona text to define how the assistant behaves.',
          loadingPersona: 'Loading persona...',
          templateSelector: 'Choose a template to load into the editor',
          loadingTemplate: 'Loading template...',
          personaPlaceholder: 'Enter your custom persona...',
          timezone: 'Your local timezone for timestamps',
          changingTimezone: 'Changing timezone...',
          apiKeyManagement: 'Configure and update your API keys for different AI models and services.',
          addModelTooltip: 'Add your own deployed model'
        },
        states: {
          saving: 'Saving...',
          updating: 'Updating...',
          applying: 'Applying...',
          changing: 'Changing...',
          checking: 'Checking...'
        }
      },
      chat: {
        model: 'Model',
        persona: 'Persona',
        screenshotTooltip: {
          enabled: 'Allow assistant to see your recent screenshots',
          disabled: 'Assistant cannot see your recent screenshots'
        },
        screenshotOn: 'ON',
        screenshotOff: 'OFF',
        stop: 'Stop',
        stopTitle: 'Stop generation',
        clear: 'Clear',
        clearTitle: 'Clear chat',
        welcome: {
          title: 'Welcome to MIRIX!',
          subtitle: 'Start a conversation with your AI assistant.',
          desktop: 'MIRIX is running in the desktop app environment.',
          web: 'Download the desktop app for an enhanced experience and more features!'
        },
        errorWithMessage: 'Error: {{message}}',
        clearFailed: 'Failed to clear conversation history',
        sender: {
          you: 'You',
          assistant: 'MIRIX',
          error: 'Error'
        },
        thinkingTitle: 'Thinking ...',
        steps_one: '({{count}} step)',
        steps_other: '({{count}} steps)',
        attachmentAlt: 'Attachment {{index}}'
      },
      messageInput: {
        removeFileTitle: 'Remove file',
        attachFilesTitle: 'Attach files',
        placeholder: 'Type your message... (Shift+Enter for new line)',
        sendTitle: 'Send message'
      },
      clearChat: {
        title: 'Clear Chat',
        choose: 'Choose how you want to clear the chat:',
        local: {
          title: 'üóëÔ∏è Clear Current View',
          type: 'Local Only',
          desc: 'Clear the conversation display in this window. This only affects what you see here - your conversation history with the agent remains intact and memories are preserved.',
          button: 'Clear View Only'
        },
        permanent: {
          title: '‚ö†Ô∏è Clear All Conversation History',
          type: 'Permanent',
          desc: 'Permanently delete all conversation history between you and the chat agent. This cannot be undone. Your memories (episodic, semantic, etc.) will be preserved, but the chat history will be lost forever.',
          note: 'This action is permanent and cannot be undone!',
          button: 'Permanently Clear All',
          clearing: 'Clearing...'
        },
        cancel: 'Cancel'
      },
      screenshot: {
        title: 'Screen Monitor',
        controls: {
          openSystemPrefs: 'Open System Preferences',
          selectApps: 'Select Apps',
          permissionRequired: 'Permission Required',
          selectAppsFirst: 'Select Apps First',
          stopMonitor: 'Stop Monitor',
          startMonitor: 'Start Monitor'
        },
        status: {
          status: 'Status',
          permissions: 'Permissions',
          screenshotsSent: 'Screenshots sent',
          lastSent: 'Last sent',
          monitoring: 'monitoring',
          capturing: 'capturing',
          sending: 'sending',
          idle: 'idle',
          granted: 'Granted',
          denied: 'Denied',
          checking: 'Checking...'
        },
        monitoring: {
          multipleApps: 'Monitoring {{count}} apps',
          singleApp: 'Monitoring {{appName}}',
          noAppsVisible: 'No apps visible',
          statusInfo: 'Status: {{status}}',
          appsVisible: '{{visible}}/{{total}} apps visible ({{sent}} sent)',
          fullScreen: 'Full Screen'
        },
        errors: {
          desktopOnly: 'Screenshot functionality is only available in the desktop app',
          permissionDenied: 'Screen recording permission not granted. Please grant screen recording permissions in System Preferences > Security & Privacy > Screen Recording and restart the application.',
          permissionCheckFailed: 'Permission check failed: {{error}}',
          systemPrefsOnly: 'System Preferences functionality is only available in the desktop app',
          systemPrefsFailed: 'Failed to open System Preferences',
          systemPrefsError: 'Failed to open System Preferences: {{error}}',
          screenshotProcessing: 'Error processing screenshot: {{error}}',
          screenshotFailed: 'Failed to send screenshot: {{error}}',
          screenshotsFailed: 'Failed to send screenshots: {{error}}',
          desktopRequired: 'Screenshot functionality requires desktop app'
        },
        permissions: {
          warningTitle: 'Screen recording permission is required to use the screen monitor feature.',
          warningAction: 'Click "‚öôÔ∏è Open System Preferences" to grant permission directly!',
          helpTitle: 'How to grant permission:',
          helpStep1: '1. Click "‚öôÔ∏è Open System Preferences" button above',
          helpStep2: '2. Find "MIRIX" in the list and check the box next to it',
          helpStep3: '3. No restart required - permissions take effect immediately'
        }
      },
      appSelector: {
        title: 'Select Apps to Monitor',
        loading: 'Scanning available apps and windows...',
        filters: {
          all: 'All',
          windows: 'Windows',
          screens: 'Screens'
        },
        types: {
          window: 'window',
          screen: 'screen'
        },
        status: {
          hidden: 'Hidden',
          hiddenTooltip: 'This window is minimized or on another desktop'
        },
        footer: {
          sourcesSelected_one: '{{count}} source selected',
          sourcesSelected_other: '{{count}} sources selected',
          cancel: 'Cancel',
          startMonitoring: 'Start Monitoring'
        },
        errors: {
          desktopOnly: 'App selection is only available in the desktop app',
          failedToLoad: 'Failed to get capture sources',
          loadError: 'Failed to load sources: {{error}}'
        }
      },
      localModel: {
        title: 'Add Local Model',
        form: {
          modelName: 'Model Name',
          modelNamePlaceholder: 'e.g. qwen3-32b',
          modelNameDescription: 'The name identifier for your deployed model',
          modelEndpoint: 'Model Endpoint',
          modelEndpointPlaceholder: 'e.g. http://localhost:47283/v1',
          modelEndpointDescription: 'The API endpoint URL for your deployed model',
          apiKey: 'API Key',
          apiKeyDescription: 'Authentication key for your model endpoint',
          temperature: 'Temperature',
          temperatureDescription: 'Controls randomness in responses (0.0 = deterministic, 1.0 = creative)',
          maxTokens: 'Max Tokens',
          maxTokensDescription: 'Maximum number of tokens to generate in each response',
          maximumLength: 'Maximum Length',
          maximumLengthDescription: 'Maximum context length supported by the model',
          required: '*',
          cancel: 'Cancel',
          addModel: 'Add Model',
          adding: 'Adding...'
        },
        errors: {
          modelNameRequired: 'Model name is required',
          endpointRequired: 'Model endpoint is required',
          apiKeyRequired: 'API key is required'
        }
      },
      memory: {
        types: {
          episodic: 'Episodic',
          semantic: 'Semantic',
          procedural: 'Procedural',
          resource: 'Resource',
          core: 'Core',
          credentials: 'Credentials'
        },
        tabs: {
          'past-events': 'Past Events',
          'semantic': 'Semantic',
          'procedural': 'Procedural',
          'docs-files': 'Docs & Files',
          'core-understanding': 'Core Understanding',
          'credentials': 'Credentials'
        },
        actions: {
          uploadExport: 'Upload & Export',
          reflexion: 'Reflexion',
          processing: 'Processing...',
          refresh: 'Refresh',
          retry: 'Retry',
          edit: 'Edit',
          save: 'Save',
          cancel: 'Cancel',
          saving: 'Saving...',
          clearSearch: 'Clear search',
          expandDetails: 'Expand details',
          collapseDetails: 'Collapse details',
          hideDetails: 'Hide Details',
          showDetails: 'Show Details'
        },
        search: {
          placeholder: 'Search {{type}}...',
          noResults: 'No {{type}} found matching "{{query}}".',
          tryDifferent: 'Try a different search term or clear the search to see all memories.',
          clearToSeeAll: 'Clear search to see all memories'
        },
        view: {
          listView: 'List',
          treeView: 'Tree'
        },
        states: {
          loading: 'Loading memory data...',
          error: 'Error loading memory: {{error}}',
          empty: 'No {{type}} found.',
          loadingTree: 'Loading {{type}} memory tree...',
          treeError: 'Error: {{error}}'
        },
        details: {
          updated: 'Updated: {{date}}',
          lastAccessed: 'Last accessed: {{date}}',
          lastPracticed: 'Last Practiced: {{date}}',
          size: 'Size: {{size}}',
          characterCount: '{{current}}/{{max}} characters',
          editing: '(editing)',
          proficiency: 'Proficiency: {{value}}',
          difficulty: 'Difficulty: {{value}}',
          successRate: 'Success Rate: {{value}}',
          timeToComplete: 'Time to Complete: {{value}}',
          prerequisites: 'Prerequisites: {{list}}',
          stepByStepGuide: 'Step-by-Step Guide:',
          noStepsAvailable: 'No steps available',
          unknownTime: 'Unknown time',
          unknownType: 'Unknown',
          enterCoreUnderstanding: 'Enter core understanding...',
          credentialType: 'Credential',
          credentialMasked: 'Content masked for security',
          source: 'Source: {{source}}',
          sensitivity: '{{level}} Sensitivity'
        },
        reflexion: {
          title: 'Reorganize memory with Reflexion Agent',
          success: 'Reflexion completed successfully',
          error: 'Reflexion failed'
        },
        tooltips: {
          uploadExport: 'Upload & Export Memory Data',
          reflexion: 'Reorganize memory with Reflexion Agent',
          listView: 'List view',
          treeView: 'Tree view'
        }
      },
      uploadExport: {
        title: 'Memory Upload & Export',
        sections: {
          upload: 'Upload Memory Data',
          export: 'Export Memory Data'
        },
        memoryTypes: {
          episodic: 'Episodic',
          semantic: 'Semantic', 
          procedural: 'Procedural',
          resource: 'Resource'
        },
        memoryTypeDescriptions: {
          episodic: 'Personal experiences and events',
          semantic: 'Facts and general knowledge',
          procedural: 'Skills and procedures',
          resource: 'Files and documents'
        },
        form: {
          selectTypes: 'Select Memory Types to Export:',
          exportPath: 'Export File Path:',
          browse: 'Browse',
          pathPlaceholder: 'Enter file path for export...',
          upload: 'Upload',
          export: 'Export',
          exporting: 'Exporting...',
          close: 'Close'
        },
        descriptions: {
          modalDescription: 'Manage your memory data - upload new data or export existing memories',
          uploadSection: 'Import memory data from external sources',
          exportSection: 'Export selected memory types to Excel with separate sheets',
          saveDialogTitle: 'Save Memory Export',
          defaultFileName: 'memories_export.xlsx'
        },
        alerts: {
          pathRequired: 'Please enter or browse for a file path for export',
          selectTypes: 'Please select at least one memory type to export',
          uploadNotImplemented: 'Upload functionality is not implemented yet (mock feature)',
          browserUnavailable: 'File browser not available. Please enter the path manually.',
          browserFailed: 'Failed to open file browser. Please enter the path manually.',
          exportFailed: 'Export failed'
        },
        status: {
          success: 'Export completed successfully!',
          failed: 'Export failed',
          exported: 'Total exported: {{total}} items',
          breakdown: 'Breakdown: {{breakdown}}'
        },
        errors: {
          atLeastOneSheetVisible: 'At least one sheet must be visible',
          noData: 'No data to export',
          permissionDenied: 'Permission denied when writing the file',
          unknown: 'Export failed'
        }
      }
    }
  },
  zh: {
    translation: {
      tabs: {
        chat: 'ËÅäÂ§©',
        screenshots: 'Êà™Âõæ',
        memory: 'ËÆ∞ÂøÜÂ∫ì',
        settings: 'ËÆæÁΩÆ'
      },
      settings: {
        title: 'ËÆæÁΩÆ',
        subtitle: 'ÈÖçÁΩÆ‰Ω†ÁöÑ MIRIX Âä©Êâã',
        sections: {
          model: 'Ê®°ÂûãÈÖçÁΩÆ',
          preferences: 'ÂÅèÂ•ΩËÆæÁΩÆ',
          apiKeys: 'API ÂØÜÈí•',
          about: 'ÂÖ≥‰∫é'
        },
        chatModel: 'ËÅäÂ§©Ê®°Âûã',
        memoryModel: 'ËÆ∞ÂøÜÁÆ°ÁêÜÊ®°Âûã',
        persona: '‰∫∫ËÆæ',
        personaEdit: 'ÁºñËæë',
        applyTemplate: 'Â∫îÁî®Ê®°Êùø',
        editPersonaText: 'ÁºñËæë‰∫∫ËÆæÊñáÊú¨',
        buttons: {
          save: '‰øùÂ≠ò',
          cancel: 'ÂèñÊ∂à'
        },
        language: 'ËØ≠Ë®Ä',
        languageDescription: 'ÈÄâÊã©ÁïåÈù¢ËØ≠Ë®Ä',
        timezone: 'Êó∂Âå∫',
        apiKeyManagement: 'API ÂØÜÈí•ÁÆ°ÁêÜ',
        updateApiKeys: 'Êõ¥Êñ∞ API ÂØÜÈí•',
        about: {
          name: 'MIRIX Ê°åÈù¢Á´Ø',
          version: 'ÁâàÊú¨',
          docs: 'ÊñáÊ°£',
          reportIssue: 'ÂèçÈ¶àÈóÆÈ¢ò',
          description: 'Áî±ÂÖàËøõËØ≠Ë®ÄÊ®°ÂûãÈ©±Âä®ÁöÑAIÂä©Êâã'
        },
        add: 'Ê∑ªÂä†',
        descriptions: {
          chatModel: 'ÈÄâÊã©Áî®‰∫éËÅäÂ§©ÂõûÂ§çÁöÑAIÊ®°Âûã',
          changingChatModel: 'Ê≠£Âú®Êõ¥ÊîπËÅäÂ§©‰ª£ÁêÜÊ®°Âûã...',
          memoryModel: 'ÈÄâÊã©Áî®‰∫éËÆ∞ÂøÜÁÆ°ÁêÜÊìç‰ΩúÁöÑAIÊ®°Âûã',
          changingMemoryModel: 'Ê≠£Âú®Êõ¥ÊîπËÆ∞ÂøÜÁÆ°ÁêÜÊ®°Âûã...',
          personaDisplay: 'ËøôÈáåÊòæÁ§∫Âä©ÊâãÂΩìÂâçÁöÑÊ¥ªË∑É‰∫∫ËÆæ„ÄÇÁÇπÂáªÁºñËæëÊù•‰øÆÊîπ„ÄÇ',
          personaEdit: 'Â∫îÁî®Ê®°ÊùøÊàñËá™ÂÆö‰πâ‰∫∫ËÆæÊñáÊú¨Êù•ÂÆö‰πâÂä©ÊâãÁöÑË°å‰∏∫ÊñπÂºè„ÄÇ',
          loadingPersona: 'Ê≠£Âú®Âä†ËΩΩ‰∫∫ËÆæ...',
          templateSelector: 'ÈÄâÊã©‰∏Ä‰∏™Ê®°ÊùøÂä†ËΩΩÂà∞ÁºñËæëÂô®‰∏≠',
          loadingTemplate: 'Ê≠£Âú®Âä†ËΩΩÊ®°Êùø...',
          personaPlaceholder: 'ËæìÂÖ•‰Ω†ÁöÑËá™ÂÆö‰πâ‰∫∫ËÆæ...',
          timezone: 'Áî®‰∫éÊó∂Èó¥Êà≥ÁöÑÊú¨Âú∞Êó∂Âå∫',
          changingTimezone: 'Ê≠£Âú®Êõ¥ÊîπÊó∂Âå∫...',
          apiKeyManagement: '‰∏∫‰∏çÂêåÁöÑAIÊ®°ÂûãÂíåÊúçÂä°ÈÖçÁΩÆÂíåÊõ¥Êñ∞‰Ω†ÁöÑAPIÂØÜÈí•„ÄÇ',
          addModelTooltip: 'Ê∑ªÂä†‰Ω†Ëá™Â∑±ÈÉ®ÁΩ≤ÁöÑÊ®°Âûã'
        },
        states: {
          saving: '‰øùÂ≠ò‰∏≠...',
          updating: 'Êõ¥Êñ∞‰∏≠...',
          applying: 'Â∫îÁî®‰∏≠...',
          changing: 'Êõ¥Êîπ‰∏≠...',
          checking: 'Ê£ÄÊü•‰∏≠...'
        }
      },
      chat: {
        model: 'Ê®°Âûã',
        persona: '‰∫∫ËÆæ',
        screenshotTooltip: {
          enabled: 'ÂÖÅËÆ∏Âä©ÊâãÊü•Áúã‰Ω†ÊúÄËøëÁöÑÊà™Âõæ',
          disabled: 'Âä©ÊâãÂ∞ÜÊó†Ê≥ïÊü•Áúã‰Ω†ÊúÄËøëÁöÑÊà™Âõæ'
        },
        screenshotOn: 'ÂºÄ',
        screenshotOff: 'ÂÖ≥',
        stop: 'ÂÅúÊ≠¢',
        stopTitle: 'ÂÅúÊ≠¢ÁîüÊàê',
        clear: 'Ê∏ÖÁ©∫',
        clearTitle: 'Ê∏ÖÁ©∫ÂØπËØù',
        welcome: {
          title: 'Ê¨¢Ëøé‰ΩøÁî® MIRIXÔºÅ',
          subtitle: 'ÂºÄÂßã‰∏é AI Âä©ÊâãÂØπËØù„ÄÇ',
          desktop: 'MIRIX Ê≠£Âú®Ê°åÈù¢Á´ØÁéØÂ¢ÉËøêË°å„ÄÇ',
          web: '‰∏ãËΩΩÊ°åÈù¢Áâà‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑ‰ΩìÈ™åÂíåÊõ¥Â§öÂäüËÉΩÔºÅ'
        },
        errorWithMessage: 'ÈîôËØØÔºö{{message}}',
        clearFailed: 'Ê∏ÖÁ©∫ÂØπËØùÂéÜÂè≤Â§±Ë¥•',
        sender: {
          you: '‰Ω†',
          assistant: 'MIRIX',
          error: 'ÈîôËØØ'
        },
        thinkingTitle: 'ÊÄùËÄÉ‰∏≠ ...',
        steps_one: 'Ôºà{{count}} Ê≠•Ôºâ',
        steps_other: 'Ôºà{{count}} Ê≠•Ôºâ',
        attachmentAlt: 'ÈôÑ‰ª∂ {{index}}'
      },
      messageInput: {
        removeFileTitle: 'ÁßªÈô§Êñá‰ª∂',
        attachFilesTitle: 'Ê∑ªÂä†Êñá‰ª∂',
        placeholder: 'ËæìÂÖ•Ê∂àÊÅØ...ÔºàShift+Enter Êç¢Ë°åÔºâ',
        sendTitle: 'ÂèëÈÄÅÊ∂àÊÅØ'
      },
      clearChat: {
        title: 'Ê∏ÖÁ©∫ÂØπËØù',
        choose: 'ÈÄâÊã©Ê∏ÖÁ©∫ÂØπËØùÁöÑÊñπÂºèÔºö',
        local: {
          title: 'üóëÔ∏è Ê∏ÖÁ©∫ÂΩìÂâçËßÜÂõæ',
          type: '‰ªÖÊú¨Âú∞',
          desc: 'Ê∏ÖÁ©∫ÂΩìÂâçÁ™óÂè£‰∏≠ÁöÑÂØπËØùÊòæÁ§∫„ÄÇËØ•Êìç‰Ωú‰ªÖÂΩ±Âìç‰Ω†Âú®Ê≠§Â§ÑÁúãÂà∞ÁöÑÂÜÖÂÆπ‚Äî‚Äî‰∏é‰Ω†ÂíåÂä©Êâã‰πãÈó¥ÁöÑÂØπËØùÂéÜÂè≤‰ªç‰ºö‰øùÁïôÔºåËÆ∞ÂøÜ‰∏ç‰ºöË¢´Âà†Èô§„ÄÇ',
          button: '‰ªÖÊ∏ÖÁ©∫ËßÜÂõæ'
        },
        permanent: {
          title: '‚ö†Ô∏è Ê∏ÖÁ©∫ÂÖ®ÈÉ®ÂØπËØùÂéÜÂè≤',
          type: 'Ê∞∏‰πÖ',
          desc: 'Ê∞∏‰πÖÂà†Èô§‰Ω†‰∏éËÅäÂ§©Âä©Êâã‰πãÈó¥ÁöÑÊâÄÊúâÂØπËØùÂéÜÂè≤„ÄÇËØ•Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇ‰Ω†ÁöÑËÆ∞ÂøÜÔºàÊÉÖÊôØËÆ∞ÂøÜ„ÄÅËØ≠‰πâËÆ∞ÂøÜÁ≠âÔºâÂ∞ÜË¢´‰øùÁïôÔºå‰ΩÜÂØπËØùÂéÜÂè≤Â∞ÜË¢´Ê∞∏‰πÖÊ∏ÖÈô§„ÄÇ',
          note: 'Ê≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄÔºÅ',
          button: 'Ê∞∏‰πÖÊ∏ÖÁ©∫ÂÖ®ÈÉ®',
          clearing: 'Ê∏ÖÁêÜ‰∏≠...'
        },
        cancel: 'ÂèñÊ∂à'
      },
      screenshot: {
        title: 'Â±èÂπïÁõëÊéß',
        controls: {
          openSystemPrefs: 'ÊâìÂºÄÁ≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ',
          selectApps: 'ÈÄâÊã©Â∫îÁî®',
          permissionRequired: 'ÈúÄË¶ÅÊùÉÈôê',
          selectAppsFirst: 'ËØ∑ÂÖàÈÄâÊã©Â∫îÁî®',
          stopMonitor: 'ÂÅúÊ≠¢ÁõëÊéß',
          startMonitor: 'ÂºÄÂßãÁõëÊéß'
        },
        status: {
          status: 'Áä∂ÊÄÅ',
          permissions: 'ÊùÉÈôê',
          screenshotsSent: 'Â∑≤ÂèëÈÄÅÊà™Âõæ',
          lastSent: 'ÊúÄÂêéÂèëÈÄÅ',
          monitoring: 'ÁõëÊéß‰∏≠',
          capturing: 'Êà™Âõæ‰∏≠',
          sending: 'ÂèëÈÄÅ‰∏≠',
          idle: 'Á©∫Èó≤',
          granted: 'Â∑≤ÊéàÊùÉ',
          denied: 'Ë¢´ÊãíÁªù',
          checking: 'Ê£ÄÊü•‰∏≠...'
        },
        monitoring: {
          multipleApps: 'ÁõëÊéß {{count}} ‰∏™Â∫îÁî®',
          singleApp: 'ÁõëÊéß {{appName}}',
          noAppsVisible: 'Ê≤°ÊúâÂèØËßÅÂ∫îÁî®',
          statusInfo: 'Áä∂ÊÄÅÔºö{{status}}',
          appsVisible: '{{visible}}/{{total}} ‰∏™Â∫îÁî®ÂèØËßÅÔºàÂ∑≤ÂèëÈÄÅ {{sent}} Âº†Ôºâ',
          fullScreen: 'ÂÖ®Â±è'
        },
        errors: {
          desktopOnly: 'Êà™ÂõæÂäüËÉΩ‰ªÖÂú®Ê°åÈù¢Á´ØÂ∫îÁî®‰∏≠ÂèØÁî®',
          permissionDenied: 'Êú™Êéà‰∫àÂ±èÂπïÂΩïÂà∂ÊùÉÈôê„ÄÇËØ∑Âú®Á≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ > ÂÆâÂÖ®ÊÄß‰∏éÈöêÁßÅ > Â±èÂπïÂΩïÂà∂‰∏≠Êéà‰∫àÂ±èÂπïÂΩïÂà∂ÊùÉÈôêÂπ∂ÈáçÂêØÂ∫îÁî®Á®ãÂ∫è„ÄÇ',
          permissionCheckFailed: 'ÊùÉÈôêÊ£ÄÊü•Â§±Ë¥•Ôºö{{error}}',
          systemPrefsOnly: 'Á≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆÂäüËÉΩ‰ªÖÂú®Ê°åÈù¢Á´ØÂ∫îÁî®‰∏≠ÂèØÁî®',
          systemPrefsFailed: 'ÊâìÂºÄÁ≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆÂ§±Ë¥•',
          systemPrefsError: 'ÊâìÂºÄÁ≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆÂ§±Ë¥•Ôºö{{error}}',
          screenshotProcessing: 'Â§ÑÁêÜÊà™ÂõæÊó∂Âá∫ÈîôÔºö{{error}}',
          screenshotFailed: 'ÂèëÈÄÅÊà™ÂõæÂ§±Ë¥•Ôºö{{error}}',
          screenshotsFailed: 'ÂèëÈÄÅÊà™ÂõæÂ§±Ë¥•Ôºö{{error}}',
          desktopRequired: 'Êà™ÂõæÂäüËÉΩÈúÄË¶ÅÊ°åÈù¢Á´ØÂ∫îÁî®'
        },
        permissions: {
          warningTitle: 'ÈúÄË¶ÅÂ±èÂπïÂΩïÂà∂ÊùÉÈôêÊâçËÉΩ‰ΩøÁî®Â±èÂπïÁõëÊéßÂäüËÉΩ„ÄÇ',
          warningAction: 'ÁÇπÂáª"‚öôÔ∏è ÊâìÂºÄÁ≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ"ÊåâÈíÆÁõ¥Êé•ÊéàÊùÉÔºÅ',
          helpTitle: 'Â¶Ç‰ΩïÊéà‰∫àÊùÉÈôêÔºö',
          helpStep1: '1. ÁÇπÂáª‰∏äÊñπÁöÑ"‚öôÔ∏è ÊâìÂºÄÁ≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ"ÊåâÈíÆ',
          helpStep2: '2. Âú®ÂàóË°®‰∏≠ÊâæÂà∞"MIRIX"Âπ∂ÂãæÈÄâÊóÅËæπÁöÑÂ§çÈÄâÊ°Ü',
          helpStep3: '3. Êó†ÈúÄÈáçÂêØ - ÊùÉÈôêÁ´ãÂç≥ÁîüÊïà'
        }
      },
      appSelector: {
        title: 'ÈÄâÊã©Ë¶ÅÁõëÊéßÁöÑÂ∫îÁî®',
        loading: 'Ê≠£Âú®Êâ´ÊèèÂèØÁî®ÁöÑÂ∫îÁî®ÂíåÁ™óÂè£...',
        filters: {
          all: 'ÂÖ®ÈÉ®',
          windows: 'Á™óÂè£',
          screens: 'Â±èÂπï'
        },
        types: {
          window: 'Á™óÂè£',
          screen: 'Â±èÂπï'
        },
        status: {
          hidden: 'Â∑≤ÈöêËóè',
          hiddenTooltip: 'Ê≠§Á™óÂè£Â∑≤ÊúÄÂ∞èÂåñÊàñÂú®ÂÖ∂‰ªñÊ°åÈù¢‰∏ä'
        },
        footer: {
          sourcesSelected_one: 'Â∑≤ÈÄâÊã© {{count}} ‰∏™Ê∫ê',
          sourcesSelected_other: 'Â∑≤ÈÄâÊã© {{count}} ‰∏™Ê∫ê',
          cancel: 'ÂèñÊ∂à',
          startMonitoring: 'ÂºÄÂßãÁõëÊéß'
        },
        errors: {
          desktopOnly: 'Â∫îÁî®ÈÄâÊã©ÂäüËÉΩ‰ªÖÂú®Ê°åÈù¢Á´ØÂ∫îÁî®‰∏≠ÂèØÁî®',
          failedToLoad: 'Ëé∑ÂèñÊçïËé∑Ê∫êÂ§±Ë¥•',
          loadError: 'Âä†ËΩΩÊ∫êÂ§±Ë¥•Ôºö{{error}}'
        }
      },
      localModel: {
        title: 'Ê∑ªÂä†Êú¨Âú∞Ê®°Âûã',
        form: {
          modelName: 'Ê®°ÂûãÂêçÁß∞',
          modelNamePlaceholder: '‰æãÂ¶ÇÔºöqwen3-32b',
          modelNameDescription: '‰Ω†ÈÉ®ÁΩ≤ÁöÑÊ®°ÂûãÁöÑÂêçÁß∞Ê†áËØÜÁ¨¶',
          modelEndpoint: 'Ê®°ÂûãÁ´ØÁÇπ',
          modelEndpointPlaceholder: '‰æãÂ¶ÇÔºöhttp://localhost:47283/v1',
          modelEndpointDescription: '‰Ω†ÈÉ®ÁΩ≤ÁöÑÊ®°ÂûãÁöÑAPIÁ´ØÁÇπURL',
          apiKey: 'API ÂØÜÈí•',
          apiKeyDescription: 'Ê®°ÂûãÁ´ØÁÇπÁöÑËÆ§ËØÅÂØÜÈí•',
          temperature: 'Ê∏©Â∫¶',
          temperatureDescription: 'ÊéßÂà∂ÂìçÂ∫îÁöÑÈöèÊú∫ÊÄßÔºà0.0 = Á°ÆÂÆöÊÄßÔºå1.0 = ÂàõÊÑèÊÄßÔºâ',
          maxTokens: 'ÊúÄÂ§ßTokenÊï∞',
          maxTokensDescription: 'ÊØèÊ¨°ÂìçÂ∫î‰∏≠ÁîüÊàêÁöÑÊúÄÂ§ßtokenÊï∞Èáè',
          maximumLength: 'ÊúÄÂ§ßÈïøÂ∫¶',
          maximumLengthDescription: 'Ê®°ÂûãÊîØÊåÅÁöÑÊúÄÂ§ß‰∏ä‰∏ãÊñáÈïøÂ∫¶',
          required: '*',
          cancel: 'ÂèñÊ∂à',
          addModel: 'Ê∑ªÂä†Ê®°Âûã',
          adding: 'Ê∑ªÂä†‰∏≠...'
        },
        errors: {
          modelNameRequired: 'Ê®°ÂûãÂêçÁß∞ÊòØÂøÖÂ°´È°π',
          endpointRequired: 'Ê®°ÂûãÁ´ØÁÇπÊòØÂøÖÂ°´È°π',
          apiKeyRequired: 'APIÂØÜÈí•ÊòØÂøÖÂ°´È°π'
        }
      },
      memory: {
        types: {
          episodic: 'ÊÉÖÊôØËÆ∞ÂøÜ',
          semantic: 'ËØ≠‰πâËÆ∞ÂøÜ',
          procedural: 'Á®ãÂ∫èËÆ∞ÂøÜ',
          resource: 'ËµÑÊ∫êËÆ∞ÂøÜ',
          core: 'Ê†∏ÂøÉËÆ∞ÂøÜ',
          credentials: 'Âá≠ÊçÆËÆ∞ÂøÜ'
        },
        tabs: {
          'past-events': 'ËøáÂæÄ‰∫ã‰ª∂',
          'semantic': 'ËØ≠‰πâËÆ∞ÂøÜ',
          'procedural': 'Á®ãÂ∫èËÆ∞ÂøÜ',
          'docs-files': 'ÊñáÊ°£ÂíåÊñá‰ª∂',
          'core-understanding': 'Ê†∏ÂøÉÁêÜËß£',
          'credentials': 'Âá≠ÊçÆ'
        },
        actions: {
          uploadExport: '‰∏ä‰º†ÂíåÂØºÂá∫',
          reflexion: 'ÂèçÊÄù',
          processing: 'Â§ÑÁêÜ‰∏≠...',
          refresh: 'Âà∑Êñ∞',
          retry: 'ÈáçËØï',
          edit: 'ÁºñËæë',
          save: '‰øùÂ≠ò',
          cancel: 'ÂèñÊ∂à',
          saving: '‰øùÂ≠ò‰∏≠...',
          clearSearch: 'Ê∏ÖÈô§ÊêúÁ¥¢',
          expandDetails: 'Â±ïÂºÄËØ¶ÊÉÖ',
          collapseDetails: 'ÊäòÂè†ËØ¶ÊÉÖ',
          hideDetails: 'ÈöêËóèËØ¶ÊÉÖ',
          showDetails: 'ÊòæÁ§∫ËØ¶ÊÉÖ'
        },
        search: {
          placeholder: 'ÊêúÁ¥¢{{type}}...',
          noResults: 'Êú™ÊâæÂà∞ÂåπÈÖç"{{query}}"ÁöÑ{{type}}„ÄÇ',
          tryDifferent: 'Â∞ùËØï‰∏çÂêåÁöÑÊêúÁ¥¢ËØçÊàñÊ∏ÖÈô§ÊêúÁ¥¢‰ª•Êü•ÁúãÊâÄÊúâËÆ∞ÂøÜ„ÄÇ',
          clearToSeeAll: 'Ê∏ÖÈô§ÊêúÁ¥¢‰ª•Êü•ÁúãÊâÄÊúâËÆ∞ÂøÜ'
        },
        view: {
          listView: 'ÂàóË°®',
          treeView: 'Ê†ëÂΩ¢'
        },
        states: {
          loading: 'Ê≠£Âú®Âä†ËΩΩËÆ∞ÂøÜÊï∞ÊçÆ...',
          error: 'Âä†ËΩΩËÆ∞ÂøÜÊó∂Âá∫ÈîôÔºö{{error}}',
          empty: 'Êú™ÊâæÂà∞{{type}}„ÄÇ',
          loadingTree: 'Ê≠£Âú®Âä†ËΩΩ{{type}}ËÆ∞ÂøÜÊ†ë...',
          treeError: 'ÈîôËØØÔºö{{error}}'
        },
        details: {
          updated: 'Êõ¥Êñ∞Êó∂Èó¥Ôºö{{date}}',
          lastAccessed: 'ÊúÄÂêéËÆøÈóÆÔºö{{date}}',
          lastPracticed: 'ÊúÄÂêéÁªÉ‰π†Ôºö{{date}}',
          size: 'Â§ßÂ∞èÔºö{{size}}',
          characterCount: '{{current}}/{{max}} Â≠óÁ¨¶',
          editing: 'ÔºàÁºñËæë‰∏≠Ôºâ',
          proficiency: 'ÁÜüÁªÉÂ∫¶Ôºö{{value}}',
          difficulty: 'ÈöæÂ∫¶Ôºö{{value}}',
          successRate: 'ÊàêÂäüÁéáÔºö{{value}}',
          timeToComplete: 'ÂÆåÊàêÊó∂Èó¥Ôºö{{value}}',
          prerequisites: 'ÂâçÁΩÆÊù°‰ª∂Ôºö{{list}}',
          stepByStepGuide: 'ÂàÜÊ≠•ÊåáÂçóÔºö',
          noStepsAvailable: 'Êó†ÂèØÁî®Ê≠•È™§',
          unknownTime: 'Êú™Áü•Êó∂Èó¥',
          unknownType: 'Êú™Áü•',
          enterCoreUnderstanding: 'ËæìÂÖ•Ê†∏ÂøÉÁêÜËß£...',
          credentialType: 'Âá≠ÊçÆ',
          credentialMasked: 'Âá∫‰∫éÂÆâÂÖ®ËÄÉËôëÔºåÂÜÖÂÆπÂ∑≤ÈöêËóè',
          source: 'Êù•Ê∫êÔºö{{source}}',
          sensitivity: '{{level}}ÊïèÊÑüÂ∫¶'
        },
        reflexion: {
          title: '‰ΩøÁî®ÂèçÊÄù‰ª£ÁêÜÈáçÁªÑËÆ∞ÂøÜ',
          success: 'ÂèçÊÄùÊàêÂäüÂÆåÊàê',
          error: 'ÂèçÊÄùÂ§±Ë¥•'
        },
        tooltips: {
          uploadExport: '‰∏ä‰º†ÂíåÂØºÂá∫ËÆ∞ÂøÜÊï∞ÊçÆ',
          reflexion: '‰ΩøÁî®ÂèçÊÄù‰ª£ÁêÜÈáçÁªÑËÆ∞ÂøÜ',
          listView: 'ÂàóË°®ËßÜÂõæ',
          treeView: 'Ê†ëÂΩ¢ËßÜÂõæ'
        }
      },
      uploadExport: {
        title: 'ËÆ∞ÂøÜ‰∏ä‰º†ÂíåÂØºÂá∫',
        sections: {
          upload: '‰∏ä‰º†ËÆ∞ÂøÜÊï∞ÊçÆ',
          export: 'ÂØºÂá∫ËÆ∞ÂøÜÊï∞ÊçÆ'
        },
        memoryTypes: {
          episodic: 'ÊÉÖÊôØËÆ∞ÂøÜ',
          semantic: 'ËØ≠‰πâËÆ∞ÂøÜ',
          procedural: 'Á®ãÂ∫èËÆ∞ÂøÜ',
          resource: 'ËµÑÊ∫êËÆ∞ÂøÜ'
        },
        memoryTypeDescriptions: {
          episodic: '‰∏™‰∫∫ÁªèÂéÜÂíå‰∫ã‰ª∂',
          semantic: '‰∫ãÂÆûÂíåÂ∏∏ËØÜ',
          procedural: 'ÊäÄËÉΩÂíåÁ®ãÂ∫è',
          resource: 'Êñá‰ª∂ÂíåÊñáÊ°£'
        },
        form: {
          selectTypes: 'ÈÄâÊã©Ë¶ÅÂØºÂá∫ÁöÑËÆ∞ÂøÜÁ±ªÂûãÔºö',
          exportPath: 'ÂØºÂá∫Êñá‰ª∂Ë∑ØÂæÑÔºö',
          browse: 'ÊµèËßà',
          pathPlaceholder: 'ËæìÂÖ•ÂØºÂá∫Êñá‰ª∂Ë∑ØÂæÑ...',
          upload: '‰∏ä‰º†',
          export: 'ÂØºÂá∫',
          exporting: 'ÂØºÂá∫‰∏≠...',
          close: 'ÂÖ≥Èó≠'
        },
        descriptions: {
          modalDescription: 'ÁÆ°ÁêÜÊÇ®ÁöÑËÆ∞ÂøÜÊï∞ÊçÆ - ‰∏ä‰º†Êñ∞Êï∞ÊçÆÊàñÂØºÂá∫Áé∞ÊúâËÆ∞ÂøÜ',
          uploadSection: '‰ªéÂ§ñÈÉ®Êù•Ê∫êÂØºÂÖ•ËÆ∞ÂøÜÊï∞ÊçÆ',
          exportSection: 'Â∞ÜÈÄâÂÆöÁöÑËÆ∞ÂøÜÁ±ªÂûãÂØºÂá∫Âà∞ExcelË°®Ê†ºÁöÑ‰∏çÂêåÂ∑•‰ΩúË°®‰∏≠',
          saveDialogTitle: '‰øùÂ≠òËÆ∞ÂøÜÂØºÂá∫',
          defaultFileName: 'memories_export.xlsx'
        },
        alerts: {
          pathRequired: 'ËØ∑ËæìÂÖ•ÊàñÊµèËßàÈÄâÊã©ÂØºÂá∫Êñá‰ª∂Ë∑ØÂæÑ',
          selectTypes: 'ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏ÄÁßçËÆ∞ÂøÜÁ±ªÂûãËøõË°åÂØºÂá∫',
          uploadNotImplemented: '‰∏ä‰º†ÂäüËÉΩÂ∞öÊú™ÂÆûÁé∞ÔºàÊ®°ÊãüÂäüËÉΩÔºâ',
          browserUnavailable: 'Êñá‰ª∂ÊµèËßàÂô®‰∏çÂèØÁî®„ÄÇËØ∑ÊâãÂä®ËæìÂÖ•Ë∑ØÂæÑ„ÄÇ',
          browserFailed: 'Êó†Ê≥ïÊâìÂºÄÊñá‰ª∂ÊµèËßàÂô®„ÄÇËØ∑ÊâãÂä®ËæìÂÖ•Ë∑ØÂæÑ„ÄÇ',
          exportFailed: 'ÂØºÂá∫Â§±Ë¥•'
        },
        status: {
          success: 'ÂØºÂá∫ÊàêÂäüÂÆåÊàêÔºÅ',
          failed: 'ÂØºÂá∫Â§±Ë¥•',
          exported: 'ÊÄªËÆ°ÂØºÂá∫Ôºö{{total}} È°π',
          breakdown: 'ËØ¶ÁªÜÔºö{{breakdown}}'
        },
        errors: {
          atLeastOneSheetVisible: 'Ëá≥Â∞ëÈúÄË¶Å‰∏Ä‰∏™Â∑•‰ΩúË°®ÂèØËßÅ',
          noData: 'Ê≤°ÊúâÂèØÂØºÂá∫ÁöÑÊï∞ÊçÆ',
          permissionDenied: 'Êó†ÊùÉÈôêÂÜôÂÖ•Êñá‰ª∂',
          unknown: 'ÂØºÂá∫Â§±Ë¥•'
        }
      }
    }
  }
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false
    },
    detection: {
      order: ['localStorage', 'navigator'],
      caches: ['localStorage']
    }
  });

export default i18n; 